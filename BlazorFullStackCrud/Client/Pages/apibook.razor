@page "/apibook"
@page "/apibook/{id:int}"
@inject IBooksService BooksServices

@if (Id == null)
{
    <PageTitle>Buat data buku baru</PageTitle>
    <h3>Buat Data Buku</h3>
}
else
{
    <PageTitle>Edit @hero.Judul_Buku</PageTitle>
    <h3>Edit @hero.Judul_Buku</h3>
}

<EditForm Model="hero" OnSubmit="HandleSubmit">
    <div>
        <label for="Judul_Buku">Judul Buku</label>
        <InputText id="Judul_Buku" @bind-Value="hero.Judul_Buku" class="form-control"></InputText>
    </div>
    <div>
        <label for="Penerbit">Penerbit</label>
        <InputText id="Penerbit" @bind-Value="hero.Penerbit" class="form-control"></InputText>
    </div>
    <div>
        <label for="penulis">Penulis</label>
        <InputText id="penulis" @bind-Value="hero.Penulis" class="form-control"></InputText>
    </div>
    <div>
        <label>Genre</label><br />
        <InputSelect @bind-Value="hero.GenreId" class="form-select">
            @foreach (var comic in BooksServices.Genres)
            {
                <option value="@comic.Id">@comic.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteHero">Delete</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Buku hero = new Buku { Genre = new Genre() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save" : "Update Hero";
        await BooksServices.GetComics();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            hero.Genre = BooksServices.Genres[0];
            hero.GenreId = hero.Genre.Id;
        }
        else
        {
            hero = await BooksServices.GetSingleHero((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await BooksServices.CreateHero(hero);
        }
        else
        {
            await BooksServices.UpdateHero(hero);
        }
    }

    async Task DeleteHero()
    {
        await BooksServices.DeleteHero(hero.Id);
    }
}
